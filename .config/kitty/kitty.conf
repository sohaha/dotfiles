# vim:fileencoding=utf-8:foldmethod=marker

# https://sw.kovidgoyal.net/kitty/conf/

# 使用 `kitty +list-fonts` 命令获取支持的字体完整列表。
# font_family     IosevkaTerm Nerd Font
font_family      JetBrainsMono Nerd Font
font_size 14.0

tab_bar_edge top
tab_bar_style slant

macos_titlebar_color system
macos_show_window_title_in menubar

scrollback_lines 8000

paste_actions quote-urls-at-prompt

strip_trailing_spaces never

select_by_word_characters @-./_~?&=%+#

show_hyperlink_targets yes

remote_kitty if-needed

# https://sw.kovidgoyal.net/kitty/kittens/ssh/#opt-kitten-ssh.share_connections
share_connections yes

# 取消映射左键点击以打开链接（容易误点）
mouse_map left click ungrabbed no-op

#: 点击鼠标下的链接或移动光标
mouse_map ctrl+left click ungrabbed mouse_handle_click selection link prompt

mouse_map ctrl+left press ungrabbed mouse_selection normal

mouse_map right press ungrabbed copy_to_clipboard

remember_window_size  yes
initial_window_width  640
initial_window_height 400

#: 如果启用，窗口大小将被记住，以便新的kitty实例与前一个实例具有相同的大小。
#: 如果禁用，窗口最初将具有由initial_window_width/height配置的大小（以像素为单位）。
#: 你可以在宽度/高度值后使用"c"后缀，使其被解释为单元格数而不是像素数。

# fat -- 一个（或可选更多）窗口在顶部全宽显示，其余窗口在底部并排显示
# grid -- 所有窗口以网格形式显示
# horizontal -- 所有窗口并排显示
# splits -- 窗口按任意模式排列，使用水平和垂直分割创建
# stack -- 一次只显示一个最大化的窗口
# tall -- 一个（或可选更多）窗口在左侧全高显示，其余窗口在右侧一个接一个显示
# vertical -- 所有窗口一个接一个显示

enabled_layouts splits,stack
#enabled_layouts all

# 当不可见窗口中的命令执行时间超过30秒时发送通知
#notify_on_cmd_finish invisible 30.0

# https://sw.kovidgoyal.net/kitty/layouts/#the-splits-layout
include splits.conf

#: 启用的窗口布局。以逗号分隔的布局名称列表。
#: 特殊值 all 表示所有布局。列出的第一个布局将作为启动布局使用。
#: 默认配置是按字母顺序排列的所有布局。有关可用布局的列表，请参见
#: https://sw.kovidgoyal.net/kitty/overview/#layouts。

window_resize_step_cells 2
window_resize_step_lines 2

#: 使用键盘调整kitty窗口大小时使用的步长（以单元格宽度/高度为单位）
#: （start_resizing_window）。cells值用于水平调整，lines值用于垂直调整。

window_border_width 0.5pt



visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: 用于可视窗口选择的字符列表（例如，用于选择要聚焦的窗口，使用focus_visible_window）。
#: 该值应该是一系列唯一的数字或字母，不区分大小写，来自集合[0-9A-Z]。
#: 将你的偏好指定为一串字符。

# 启用Shell集成后，使用负值意味着处于shell提示符的窗口不被计数，
# 只有当前正在运行某些命令的窗口才被计数。
# 参见 https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.confirm_os_window_close
confirm_os_window_close -1



# 表情符号来自 https://emojipedia.org/regional-indicator-symbol-letter-z/
# 标题解析见 https://github.com/kovidgoyal/kitty/blob/587f44ad4eb7fe545b0e580168cf0c32117b87c7/kitty/tab_bar.py#L175
tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{index}:{'🇿' if layout_name == 'stack' and num_windows > 1 else ''}{title}"



#: 前景和背景颜色

background_opacity 0.95


background_image none

#: 背景图片的路径。必须是PNG格式。

background_image_layout tiled

#: 是否平铺、缩放或固定背景图片。值可以是tiled、mirror-tiled、scaled、clamped之一。

background_image_linear no

#: 当背景图片被缩放时，是否应使用线性插值。

dynamic_background_opacity yes

#: 允许动态更改background_opacity，可以使用键盘快捷键（increase_background_opacity和
#: decrease_background_opacity）或远程控制功能。
#: 通过重新加载配置来更改此设置是不支持的。



allow_remote_control yes

#: 允许其他程序控制kitty。如果你打开此选项，其他程序可以控制kitty的所有方面，
#: 包括向kitty窗口发送文本、打开新窗口、关闭窗口、读取窗口内容等。
#: 请注意，这甚至可以通过ssh连接工作。你可以选择允许在kitty内运行的任何程序控制它，
#: 使用yes，或者只允许连接到使用kitty --listen-on命令行选项指定的套接字的程序，
#: 如果你使用socket-only值。后者在你想防止通过ssh从远程计算机运行的程序控制kitty时很有用。
#: 重新加载配置不会影响此设置。

#listen_on unix:$XDG_RUNTIME_DIR/kitty.sock
#listen_on tcp:localhost:12488


#: 告诉kitty监听指定的unix/tcp套接字以进行远程控制连接。
#: 请注意，这将应用于所有kitty实例。它可以被kitty --listen-on命令行标志覆盖。
#: 此选项仅接受UNIX套接字，例如unix:${TEMP}/mykitty或（在Linux上）unix:@mykitty。
#: 环境变量会被展开。如果存在{kitty_pid}，则它会被替换为kitty进程的PID，
#: 否则kitty进程的PID会附加到值后面，用连字符分隔。
#: 除非你还设置allow_remote_control以启用远程控制，否则此选项将被忽略。
#: 有关更多详细信息，请参阅kitty --listen-on的帮助。
#: 通过重新加载配置来更改此选项是不支持的。


#startup_session none
startup_session session.conf



allow_hyperlinks yes

#: 处理超链接（OSC 8）转义序列。如果禁用，OSC 8转义序列将被忽略。
#: 否则，它们将成为可点击的链接，你可以用鼠标或hints kitten点击。
#: 特殊值"ask"意味着kitty会在点击时询问是否打开链接。

shell_integration enabled

#: 在支持的shell上启用shell集成。这启用了诸如跳转到前一个提示符、
#: 在分页器中浏览前一个命令的输出等功能。设置为"disabled"可完全关闭shell集成。
#: 详情请参见 https://sw.kovidgoyal.net/kitty/shell-integration/。

#term xterm-kitty
term xterm-256color



kitty_mod ctrl+shift

# kitty_mod必须是修饰键而不是键，参见
# https://github.com/kovidgoyal/kitty/discussions/3457#discussioncomment-587511
# 所以你不能这样做：
#kitty_mod ctrl+a



#map kitty_mod+enter new_window
# 禁用此功能，因为可能会通过按ctrl+shift+v粘贴命令然后按enter意外创建窗口
map kitty_mod+enter no-op
map cmd+enter       no-op



map ctrl+a>x close_window


map ctrl+a>] next_window



map ctrl+a>[ previous_window


map ctrl+a>period move_window_forward


map ctrl+a>comma move_window_backward



#map kitty_mod+t new_tab_with_cwd
# map kitty_mod+t new_tab
map kitty_mod+t launch --location=hsplit
# new_tab不会保持cwd，请使用`new_tab_with_cwd`或`launch --cwd=current --type=tab`
# 参见 https://sw.kovidgoyal.net/kitty/faq/#how-do-i-open-a-new-window-or-tab-with-the-same-working-directory-as-the-current-window
# 类似tmux的标签创建方式，使用`--cwd=last_reported`，警告：这需要kitty的`shell_integration enabled`
map ctrl+a>c launch --cwd=last_reported --type=tab

map ctrl+a>, set_tab_title


#: 增加字体大小

map ctrl+equal  change_font_size all +2.0
map ctrl+plus   change_font_size all +2.0
map ctrl+kp_add change_font_size all +2.0


#: 减小字体大小

map ctrl+minus       change_font_size all -2.0
map ctrl+kp_subtract change_font_size all -2.0


#: 重置字体大小

map ctrl+0 change_font_size all 0




map f11 toggle_fullscreen


# map ctrl+a>e edit_config_file
map ctrl+a>e no-op
map ctrl+a>shift+e launch --type=tab nvim ~/.config/kitty/kitty.conf


#: 重新加载kitty.conf

map ctrl+a>shift+r combine : load_config_file : launch --type=overlay sh -c 'echo "kitty配置已重新加载。"; echo; read -r -p "按Enter键退出"; echo ""'

#: 调试kitty配置

map ctrl+a>shift+d     debug_config



# BEGIN_KITTY_THEME
# Solarized Light
include current-theme.conf
# END_KITTY_THEME

# 默认字母表见 https://github.com/kovidgoyal/kitty/blob/0c4b20aa4e6b29ccf7c389e15d7ff5189f8e98f5/kittens/hints/main.py#L125
# qwerty字母表借鉴自 https://github.com/fcsonline/tmux-thumbs#Alphabets
map ctrl+a>space kitten hints --alphabet asdfqwerzxcvjklmiuopghtybn1234567890 --customize-processing custom-hints.py

map f3 kitten hints --program '*'

# https://github.com/console-rs/console/pull/85/files
# https://github.com/console-rs/console/pull/84
# 将双击ctrl+a映射为ctrl+a（home键）
map ctrl+a>ctrl+a send_text all \x01

